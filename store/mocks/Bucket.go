// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	blob "gocloud.dev/blob"

	mock "github.com/stretchr/testify/mock"
)

// Bucket is an autogenerated mock type for the Bucket type
type Bucket struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Bucket) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, key
func (_m *Bucket) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: opts
func (_m *Bucket) List(opts *blob.ListOptions) *blob.ListIterator {
	ret := _m.Called(opts)

	var r0 *blob.ListIterator
	if rf, ok := ret.Get(0).(func(*blob.ListOptions) *blob.ListIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*blob.ListIterator)
		}
	}

	return r0
}

// ReadAll provides a mock function with given fields: ctx, key
func (_m *Bucket) ReadAll(ctx context.Context, key string) ([]byte, error) {
	ret := _m.Called(ctx, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteAll provides a mock function with given fields: ctx, key, p, opts
func (_m *Bucket) WriteAll(ctx context.Context, key string, p []byte, opts *blob.WriterOptions) error {
	ret := _m.Called(ctx, key, p, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, *blob.WriterOptions) error); ok {
		r0 = rf(ctx, key, p, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
