// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/odpf/shield/model"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateGroup provides a mock function with given fields: ctx, grp
func (_m *Store) CreateGroup(ctx context.Context, grp model.Group) (model.Group, error) {
	ret := _m.Called(ctx, grp)

	var r0 model.Group
	if rf, ok := ret.Get(0).(func(context.Context, model.Group) model.Group); ok {
		r0 = rf(ctx, grp)
	} else {
		r0 = ret.Get(0).(model.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Group) error); ok {
		r1 = rf(ctx, grp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: ctx, id
func (_m *Store) GetGroup(ctx context.Context, id string) (model.Group, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Group
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Group); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userId
func (_m *Store) GetUser(ctx context.Context, userId string) (model.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) model.User); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersByIds provides a mock function with given fields: ctx, userIds
func (_m *Store) GetUsersByIds(ctx context.Context, userIds []string) ([]model.User, error) {
	ret := _m.Called(ctx, userIds)

	var r0 []model.User
	if rf, ok := ret.Get(0).(func(context.Context, []string) []model.User); ok {
		r0 = rf(ctx, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroupUsers provides a mock function with given fields: ctx, groupId, roleId
func (_m *Store) ListGroupUsers(ctx context.Context, groupId string, roleId string) ([]model.User, error) {
	ret := _m.Called(ctx, groupId, roleId)

	var r0 []model.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []model.User); ok {
		r0 = rf(ctx, groupId, roleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, groupId, roleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: ctx, org
func (_m *Store) ListGroups(ctx context.Context, org model.Organization) ([]model.Group, error) {
	ret := _m.Called(ctx, org)

	var r0 []model.Group
	if rf, ok := ret.Get(0).(func(context.Context, model.Organization) []model.Group); ok {
		r0 = rf(ctx, org)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Organization) error); ok {
		r1 = rf(ctx, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: ctx, toUpdate
func (_m *Store) UpdateGroup(ctx context.Context, toUpdate model.Group) (model.Group, error) {
	ret := _m.Called(ctx, toUpdate)

	var r0 model.Group
	if rf, ok := ret.Get(0).(func(context.Context, model.Group) model.Group); ok {
		r0 = rf(ctx, toUpdate)
	} else {
		r0 = ret.Get(0).(model.Group)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Group) error); ok {
		r1 = rf(ctx, toUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
