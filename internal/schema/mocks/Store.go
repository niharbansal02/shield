// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/odpf/shield/model"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateAction provides a mock function with given fields: ctx, action
func (_m *Store) CreateAction(ctx context.Context, action model.Action) (model.Action, error) {
	ret := _m.Called(ctx, action)

	var r0 model.Action
	if rf, ok := ret.Get(0).(func(context.Context, model.Action) model.Action); ok {
		r0 = rf(ctx, action)
	} else {
		r0 = ret.Get(0).(model.Action)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Action) error); ok {
		r1 = rf(ctx, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNamespace provides a mock function with given fields: ctx, namespace
func (_m *Store) CreateNamespace(ctx context.Context, namespace model.Namespace) (model.Namespace, error) {
	ret := _m.Called(ctx, namespace)

	var r0 model.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, model.Namespace) model.Namespace); ok {
		r0 = rf(ctx, namespace)
	} else {
		r0 = ret.Get(0).(model.Namespace)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Namespace) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePolicy provides a mock function with given fields: ctx, policy
func (_m *Store) CreatePolicy(ctx context.Context, policy model.Policy) ([]model.Policy, error) {
	ret := _m.Called(ctx, policy)

	var r0 []model.Policy
	if rf, ok := ret.Get(0).(func(context.Context, model.Policy) []model.Policy); ok {
		r0 = rf(ctx, policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Policy) error); ok {
		r1 = rf(ctx, policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAction provides a mock function with given fields: ctx, id
func (_m *Store) GetAction(ctx context.Context, id string) (model.Action, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Action
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Action); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Action)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields: ctx, id
func (_m *Store) GetNamespace(ctx context.Context, id string) (model.Namespace, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Namespace); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Namespace)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: ctx, id
func (_m *Store) GetPolicy(ctx context.Context, id string) (model.Policy, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Policy
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Policy); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Policy)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActions provides a mock function with given fields: ctx
func (_m *Store) ListActions(ctx context.Context) ([]model.Action, error) {
	ret := _m.Called(ctx)

	var r0 []model.Action
	if rf, ok := ret.Get(0).(func(context.Context) []model.Action); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Action)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespaces provides a mock function with given fields: ctx
func (_m *Store) ListNamespaces(ctx context.Context) ([]model.Namespace, error) {
	ret := _m.Called(ctx)

	var r0 []model.Namespace
	if rf, ok := ret.Get(0).(func(context.Context) []model.Namespace); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicies provides a mock function with given fields: ctx
func (_m *Store) ListPolicies(ctx context.Context) ([]model.Policy, error) {
	ret := _m.Called(ctx)

	var r0 []model.Policy
	if rf, ok := ret.Get(0).(func(context.Context) []model.Policy); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAction provides a mock function with given fields: ctx, action
func (_m *Store) UpdateAction(ctx context.Context, action model.Action) (model.Action, error) {
	ret := _m.Called(ctx, action)

	var r0 model.Action
	if rf, ok := ret.Get(0).(func(context.Context, model.Action) model.Action); ok {
		r0 = rf(ctx, action)
	} else {
		r0 = ret.Get(0).(model.Action)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Action) error); ok {
		r1 = rf(ctx, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNamespace provides a mock function with given fields: ctx, id, namespace
func (_m *Store) UpdateNamespace(ctx context.Context, id string, namespace model.Namespace) (model.Namespace, error) {
	ret := _m.Called(ctx, id, namespace)

	var r0 model.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Namespace) model.Namespace); ok {
		r0 = rf(ctx, id, namespace)
	} else {
		r0 = ret.Get(0).(model.Namespace)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, model.Namespace) error); ok {
		r1 = rf(ctx, id, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePolicy provides a mock function with given fields: ctx, id, policy
func (_m *Store) UpdatePolicy(ctx context.Context, id string, policy model.Policy) ([]model.Policy, error) {
	ret := _m.Called(ctx, id, policy)

	var r0 []model.Policy
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Policy) []model.Policy); ok {
		r0 = rf(ctx, id, policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, model.Policy) error); ok {
		r1 = rf(ctx, id, policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
