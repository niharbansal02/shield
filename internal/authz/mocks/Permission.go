// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/odpf/shield/model"
	mock "github.com/stretchr/testify/mock"
)

// Permission is an autogenerated mock type for the Permission type
type Permission struct {
	mock.Mock
}

// AddRelation provides a mock function with given fields: ctx, relation
func (_m *Permission) AddRelation(ctx context.Context, relation model.Relation) error {
	ret := _m.Called(ctx, relation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Relation) error); ok {
		r0 = rf(ctx, relation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckRelation provides a mock function with given fields: ctx, relation, action
func (_m *Permission) CheckRelation(ctx context.Context, relation model.Relation, action model.Action) (bool, error) {
	ret := _m.Called(ctx, relation, action)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, model.Relation, model.Action) bool); ok {
		r0 = rf(ctx, relation, action)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Relation, model.Action) error); ok {
		r1 = rf(ctx, relation, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelation provides a mock function with given fields: ctx, relation
func (_m *Permission) DeleteRelation(ctx context.Context, relation model.Relation) error {
	ret := _m.Called(ctx, relation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Relation) error); ok {
		r0 = rf(ctx, relation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
