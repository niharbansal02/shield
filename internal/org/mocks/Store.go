// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/odpf/shield/model"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateOrg provides a mock function with given fields: ctx, _a1
func (_m *Store) CreateOrg(ctx context.Context, _a1 model.Organization) (model.Organization, error) {
	ret := _m.Called(ctx, _a1)

	var r0 model.Organization
	if rf, ok := ret.Get(0).(func(context.Context, model.Organization) model.Organization); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.Organization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Organization) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrg provides a mock function with given fields: ctx, id
func (_m *Store) GetOrg(ctx context.Context, id string) (model.Organization, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Organization
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Organization); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Organization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrg provides a mock function with given fields: ctx
func (_m *Store) ListOrg(ctx context.Context) ([]model.Organization, error) {
	ret := _m.Called(ctx)

	var r0 []model.Organization
	if rf, ok := ret.Get(0).(func(context.Context) []model.Organization); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrg provides a mock function with given fields: ctx, toUpdate
func (_m *Store) UpdateOrg(ctx context.Context, toUpdate model.Organization) (model.Organization, error) {
	ret := _m.Called(ctx, toUpdate)

	var r0 model.Organization
	if rf, ok := ret.Get(0).(func(context.Context, model.Organization) model.Organization); ok {
		r0 = rf(ctx, toUpdate)
	} else {
		r0 = ret.Get(0).(model.Organization)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Organization) error); ok {
		r1 = rf(ctx, toUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
